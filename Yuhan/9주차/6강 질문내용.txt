
질문1. 
헤더파일의 중복 include 문제를 조건 컴파일로 해결한다고 나와있습니다.
#indef #define #endif 를 이용해 해결한다 나와있었지만
회근 기술로는 #pragma once로도 바로 해결이 가능하다고 되있던데
두 기술의 차이점이 있는지 궁금합니다.

답변1.
#ifndef는 macro wrapper방식을 이용 include의 중복을 방지 하는 것이고
매크로 처리기를 통해 특정 매크로가 선언되어 있으면 조건이 참이 아니므로
#endif까지의 코드가 무효화시킨다고 합니다.
#pragma once의 directive로 처리기에 직접 지시하는 방법으로 preprocessor에게
이 파일을 한번만 읽어들이라고 지시하는 합니다.
차이점은
#ifndef는 전처리기가 파일을 계속 읽어들여 해당 헤더파일을 발견할 때마다 계속 읽으며,
#pragma once는 한번만 읽어 들이기 때문에 시간이 단축됩니다.


=> 차이점은 #pragma once는 Visual Studio에서만 사용가능한 것이에요
   우리는 표준을 배우는 것이므로 #ifndef #define #endif로 기술하면 됩니다.
   표준 C++이 아니므로 우리는 위에 것을 사용.




질문2.
복사 생성자를 하였을때 전부 const char을 사용하였는데 const char 말고도
다른 타입을 쓸 수 있는지 궁금합니다.

답변2. 
const는 상수를 의미하고 cstring 문자열을 함수에 전달할때 상수로 전달해야
값을 읽을 수 잇어서 붙인것이에요.
그리고 다른 포인터 타입도 마찬가지로 복사생성자에서 사용가능해요.
오늘 수업중에 실습을 하면서 보여주도록 할게요.







