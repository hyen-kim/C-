
==========================================================================

5주차 

멤버함수 : 생성자(하나이상가능), 소멸자(하나만), 일반멤버함수(하나이상가능)로 구분
생성자와 소멸자는 반드시 존재, 
생성하지 않았다면 자동으로 컴파일러가 생성해준다. -> 기본생성자, 기본소멸자

*) 생성자와 소멸자는 리턴타입을 적지 않지만 
나머지는 리턴타입이 없다면 void를 적어야한다.

==========================================================================

1. 클래스 만들기 설명 

class Circle {		// class(예약어) 명칭 {}
public:			// 멤버에 대한 접근 지정자
	int raius;	// 멤버변수
	double getArea();// 멤버 함수	: 함수의 원형

	// 함수의 원형이란 ? -> 함수의 리턴타입과 함수명과 
	//	 		매개변수가 무엇이 나오는지를 적는것이라고 생각.


};			// 반드시 세미콜론으로 끝남
---------------------------------> 클래스 선언부




// 함수의 리턴타입과 클래스이름을 반드시 적고 :: 함수명
double Circle :: getArea(){
	// 함수가 동작하는 내용
	return 3.14 * radius * radius;	
	// 객체가 가지고 있는 속성값을 변수에 저장해놨다고 생각하면 된다.
	// 
} 
---------------------------------> 클래스 구현부 



클래스의 외부란 ? -> 클래스의 선언부와 구현부를 뺀 나머지를 말한다.
동작하는 외부란 ? int main()이 아니면 외부라고 한다.



*) 클래스 선언부와 클래스 구현부로 나눈이유 ?
 다른 파일에서 활용하기 위함
-> 객체를 관리하기 쉽게하기 위해 헤더파일과 cpp(소스)파일로 구별하게 된다.



******* < 예제 3-1 Circle 클래스의 객체 생성 및 활용 정리 > : 요약 정리 *******
클래스는 선언부와 구현부로 나뉜다.
선언부는 "멤버변수"와 "멤버함수" (함수의 원형)
구현부는 멤버함수가 동작하는 내용


작성한 프로그램과 main()밖의 클래스가 주메모리로 올라가고,
main()이 실행될 때 main안에 클래스를 선언했을 시 
실행되면서 주메모리에 객체가 생성된다.
=> 정리하자면 main()밖의 클래스는 객체의 틀을 정의한 것이지 객체가 아니다.
main()안에서 클래스이름 객체명; 으로 인해 객체가 주메모리에 생성되는 것이다.




2. 생성자 : 객체가 생성됨에 동시에 "무조건 생성"

- 객체가 생성되는 시점에서 자동으로 호출되는 멤버 함수
- 클래스 이름과 동일한 멤버 함수
- 오버로딩 : 동일한 함수명 매개변수의 수만 다름 => 중복허용
- 생성자는 앞에 리턴타입을 적을 수 없음. ( void X )

선언부에는 함수의 원형
구현부에는 실제 생성자가 동작할 부분을 작성 ex) 매개변수가 있는, 없는 생성자


목적 : 객체가 생성될 때 각 객체가 어떤 특징을 갖도록 해주는 것
함수의 오버로딩으로 각각의 객체를 만든다는 의미
생성자는 객체가 만들어짐과 동시에 동작하는 것
생성자는 한 클래스 내에서 중복되서 선언은 가능하지만 
중복된 생성자 중 하나만 실행할 수 있다.

******* < 예제 3-3 2개의 생성자를 가진 Circle 클래스 > : 요약 정리 *******
생성자는 객체가 생성될 때 무조건 생성되며, 만약 생성하지 않았다면 컴파일러에 의해 
자동으로 기본생성자가 생성된다.

함수의 이름은 같지만 매개변수가 다른 형태를 의미하는 오버로딩이 가능하다.

생성자는 자동 형변환이 가능하면 에러를 내지 않고 계산해준다.

선언부에서 생성부를 정의하고 
구현부에서 생성부가 동작한다.




2-1. 생성자가 다른 생성자 호출(위임 생성자)
- 여러 생성자에 중복 작성된 코드의 간소화

// Circle 생성자 
Circle::Circle() {  // Circle(); 자동호출
    radius = 1;     // int 형
    cout << "반지름 " << radius << "원 생성" << endl;
}
Circle::Circle(int r) { // Circle(30); 자동호출
    radius = r;
    cout << "반지름 " << radius << "원 생성" << endl;
}
-------------------------------------------------------------

Circle::Circle(): Circle(1) {  }	// Circle(int r)의 생성자 호출	<-- 위임 생성자

Circle::Circle(int r) {							<-- 타겟 생성자
    radius = r;
    cout << "반지름 " << radius << "원 생성" << endl;
}





2-2. 다양한 생성자의 멤버 변수 초기화 

class Point{
	int x, y;
public:
	Point();
	Point(int a, int b);
};

(1) 생성자 코드에서 멤버 변수 초기화 *
Point::Point(){x = 0; y = 0;}
Point::Point(int a, int b){x = a; y = b;}


(2) 생성자 서두에 초깃값으로 초기화	=> 대괄호 전에 초기화
Point::Point(): x(0), y(0){ // 멤버 변수 x,y를 0으로 초기화}
Point::Point(int a, int b) // 멤버 변수 x = a로, y = b로 초기화
	: x(a), y(b) {	 // 콜론(:) 이하 부분을 밑줄에 써도 됨
	// 위에서 받은 매개변수 a,b 를 넣어줬다는 말
}


(3) 클래스 선언부에서 직접 초기화	=> 버전에 따라서 동작하는 방식이 좀 다름
class Point {
	int x = 0, y = 0; // 클래스 선언부에서 x, y를 0으로 직접 초기화 
public:
....
}




3. 기본 생성자

- 클래스에 생성자가 하나도 선언되어 있지 않은 경우, 
  컴파일러가 대신 삽입해주는 생성자
- 매개 변수 없는 생성자
- 디폴트 생성자라고도 부름

class Circle {
	....
	Circle();	// 기본 생성자
}



3-1. 기본 생성자가 자동으로 생성되는 경우
- 생성자가 하나도 작성되어 있지 않은 클래스의 경우
	-> 컴파일러가 기본 생성자 자동 생성

=> 생성자를 선언하지 않고 클래스를 작성하여도 
   컴파일러에 의해 기본 생성자를 자동으로 삽입하지만
   우리 눈에는 생성자를 선언하지 않은 클래스로 보인다.

생성자는 객체를 한번 만들때만 사용하는데 객체 내부에 왜 가지고 있는가 ?
객체 내부에 생성자와 소멸자는 한번 사용하고 없어지는 것이 아니라
객체를 만들 때 같이 들어가게 되는 것이 개념 근데 재사용할 수는 없음




3-2. 기본 생성자가 자동으로 생성되지 않는 경우
- 생성자가 하나라도 선언된 클래스의 경우 
	-> 컴파일러는 기본 생성자를 자동 생성하지 않음





4. 소멸자
- 객체가 소멸되는 시점에서 자동으로 호출되는 함수
	-> 오직 한번만 자동 호출 
	-> 객체 메모리 소멸 "직전 호출"됨
- 객체가 자원을 가져다가 이용했거나 여러가지 메모리 쌓아놨다면 정리해주는 역할

소멸자 함수 선언 ~Circle();
소멸자 함수 구현 ~Cicle::~Ciecle(){}

소멸자는 리턴 타입이 없고, 어떤 값도 리턴하면 안됨

=> 객체는 생성의 반대 순으로 소멸된다.	=> 스택의 개념 (FIFO)
나중에 들어온 것이 먼저 사라진다는 개념




4-1. 지역 객체와 전역 객체의 생성 및 소멸 순서


전역 객체 생성 : 프로그램 내부가 아님 ->  무엇보다 먼저 만들어짐
Circle globalDonut(1000);				----- 1
Circle globalPizza(1000);				----- 2

지역 객체 생성 : void f() 안에 있어서 지역 객체라고 함
void f(){	// f();를 호출하기 전까지 실행 되지 않음
		// 함수가 메모리에 탑재는 됬으나 호출되기까지를 기다리고 있음
	Circle fDonut(100);
	Circle fPizza(100);
}


int main() {
지역 객체 생성 : main() 안에 있어서 지역 객체라고 함
	Circle mainDonut;				----- 3
	Circle mainPizza(30);				----- 4
	f();						----- 5
}

객체의 생성 1 -> 2 -> 3 -> 4 -> 5 
객체의 소멸 5 -> 4 -> 3 -> 2 -> 1






5. 접근 지정자

- 캡슐화의 목적
	-> 객체 보호, 보안
	-> C++에서 객체의 캡슐화 전략
	- 객체의 상태를 나타내는 데이터 멤버(멤버 변수)에 대한 보호
	- 중요한 멤버는 다른 클래스나 객체에서 접근할 수 없도록 보호
	- 외부와의 인터페이스를 위해서 일부 멤버는 외부에 접근 허용

< 멤버에 대한 3가지 접근 지정자>

private (자신만)
- 동일한 클래스의 멤버 함수에만 제한함
public (누구나)
- 모든 다른 클래스에 허용
protected (자신과 자식만)
- 클래스 자신과 상속받은 자식 클래스에만 허용


5-1. 중복 접근 지정과 디폴트 접근 지정

1) 접근 지정의 중복 사용 가능
class Sample {
private:
// private 멤버선언
public:
// public 멤버선언
private:
// private 멤버선언 
}

2) 디폴트 접근 지정은 private => class는 보호가 목적이기 때문에


************************************************************
생성자와 소멸자는 무조건 public 으로 해야한다.
왜냐하면 main 에서 객체를 생성하면 동작이 되어야하는데
private으로 해버리면 거부하기 때문에 에러

생성자도 private으로 선언할 수 있다.
생성자를 private으로 선언하는 경우는 오직 하나의 객체만 생성할 수 
있도록 하기 위한 것으로 부록 D의 singleton 패턴을 참조하라.

************************************************************


5-2. 멤버 변수는 private 지정이 바람직함
- 자신의 속성 값이므로 누구나 접근 가능하면 안됨
-> 사진 참고




6. 함수 호출에 따른 시간 오버 헤드 

함수호출 -> 돌아올 리턴주소 저장 -> CPU 레지스터 값 저장 -> 함수의 매개 변수를 스택에저장
-> 함수 실행 -> 함수의 리턴값을 임시 저장에 저장 -> 저장한 레지스터 값 CPU에 복귀
-> 돌아갈 주소를 알아내어 리턴 -> 함수호출

ex) A, B, C라는 작업이 있을 때 A라는 작업보다 B라는 작업이 급하다고 해서 
중단하고 A작업을 저장하고 B작업을 시작하고 C라는 작업이 급하다고 했을 때 
다시 B라는 작업을 중단하고 B라는 작업을 저장하고 C라는 작업을 시작하고 
다 하였을 경우 끝내고 다시 순서대로 B -> A를 한다.
그렇게 되면서 총 30초 밖에 안걸릴 작업을 총 60초가 걸리게 되었다.
이게 함수 호출에 따른 시간 오버 헤드이다.

=> 작은 크기의 함수를 호출하면, 함수 실행 시간에 비해, 
호출을 위해 소요되는 부가적인 시간 오버헤드가 상대적으로 크다.



6-1. 인라인 함수 
- inline 키워드로 선언된 함수
- 인라인 함수에 대한 처리
	-> 인라인 함수를 호출하는 곳에 인라인 함수 코드를 확장 삽입 
		=> 매크로와 유사
		=> 코드 확장 후 인라인 함수는 사라짐
	-> 인라인 함수 호출
		=> 함수 호출에 따른 오버헤드 존재하지 않음
		=> 프로그램의 실행 속도 개선
	-> " 컴파일러에 의해 이루어짐 "
- 인라인 함수의 목적
	-> C++ 프로그램의 실행 속도 향상
		=> 자주 호출되는 짧은 코드의 함수 호출에 대한 시간 소모를 줄임
		=> C++ 에는 짧은 코드의 멤버 함수가 많기 때문



< 인라인 제약 사항 >
- line의 크기가 엄청크거나 복잡하다면 컴파일러가 판단하여 line 요구를 수용할 지 결정
- static 변수, switch문, goto 문 등 함수는 수용하지 않음

< 장점 >
- 프로그램의 실행 시간이 빨라진다.

< 단점 >
- 인라인 함수 코드의 삽입으로 컴파일된 전체 코드 크기 증가 => 반복적으로 소스코드가 들어가므로
	-> 통계적으로 최대 30% 증가
	-> 짧은 코드의 함수를 인라인으로 선언하는 것이 좋음


ex) 

inline int odd(int x){
	return (x%2);
}

int main(){

	if (odd(i)){
		sum += 1;
	}
}

이런식으로 하게 되었다면 컴파일러에 의해 inline 함수의 코드를 확장 삽입
main의 if(i%2){} 이런식으로 넣게 된다. => 함수호출이 일어나지 않고 바로 실행




6-2. 자동 인라인 함수
- 클래스 선언부에 구현된 멤버 함수
	-> inline으로 선언할 필요 없음
	-> 컴파일러에 의해 자동으로 인라인 처리
	-> 생성자를 포함, 모든 함수가 자동 인라인 함수 가능


ex) 

class Circle {	// 클래스 내부의 선어눕에서 구현된 멤버 함수는 인라인 함수라고 보면 된다.
private:
	int radius;
public:
	Circle(){	// 자동 인라인 함수
		radius = 1;	
	}
}




