=============================================================

11주차

=============================================================

* 유전적 상속과 객체 지향 상속

7개의 클래스가 선언되어있다고 가정 

			생물	
	   
	동물				식물
// 동물클래스로 A라는 객체를 만든다면 생물의 멤버변수와 메소드를 받음

어류		사람		나무 		풀
// 어류클래스로 B라는 객체를 만든다면 생물, 동물의 멤버변수와 메소드를 받음

-> 유전적 상속과 관계된 생물 분류 









* C++에서의 상속 (Inheritance)

C++ 에서의 상속이란 ? 
- 클래스 사이에서 상속관계 정의
	-> 객체 사이에는 상속 관계 없음
- 기본 클래스의 속성과 기능을 파생 클래스에 물려주는 것
	-> 기본 클래스 : 상속해주는 클래스, 부모 클래스
	-> 파생 클래스 : 상속받는 클래스. 자식 클래스
- 기본 클래스에서 파생 클래스로 갈수록 클래스의 개념이 구체화
- 다중 상속을 통한 클래스의 재활용성 높임









* 상속의 표현

Phone			class Phone { 
전화 걸기 			void call();
전화 받기			void receive();
			};

MobilePhone		class MobilePhone : public Phone {
무선 기지국 연결		void connectWireless();
배터리 충전하기			void recharge();
			};

MusicPhone		class MusicPhone : public MobilePhone {
음악 다운받기			void downloadMusic();
음악 재생하기			void play();
				// 부모의 접근지정자로 받음
			};

상속 관계 표현








* 상속의 목적 및 장점

1. 간결한 클래스 작성
- 기본 클래스의 기능을 물려받아 파생 클래스를 간결하게 작성

2. 클래스 간의 계층적 분류 및 관리의 용이함
- 상속은 클래스들의 구조적 관계 파악 용이

3. 클래스 재사용과 확장을 통한 소프트웨어 생산성 향상
- 빠른 소프트웨어 생산 필요
- 기존에 작성한 클래스의 재사용 : 상속
	-> 상속받아 새로운 기능을 확장
- 앞으로 있을 상속에 대비한 클래스의 객체 지향적 설계 필요 








* 상속 선언

//   파생클래스명 : 접근지정자  기본클래스명
class Student : public Person {	// 외부에서의 접근 지정방식
	// Person을 상속받는 Student 선언
	// 자식의 접근 지정방식
	....
};

class StudentWorker : public Student {
	// Student를 상속받는 StudentWorker 선언
	...
};
- Student 클래스는 Person 클래스의 멤버를 물려받는다.
- StudentWorker 클래스는 Student의 멤버를 물려받는다.
	-> Student가 물려받은 Person의 멤버도 함께 물려받는다.







* 상속과 객체 포인터 - 업 캐스팅

업 캐스팅 (up-casting)
- 파생 클래스 포인터로 기본 클래스 포인터에 치환되는 것
	ex) 사람을 동물로 봄







* 상속과 객체 포인터 - 다운 캐스팅

다운 캐스팅 (down-casting)
- 기본 클래스의 포인터가 파생 클래스의 포인터에 치환되는 것 
// 강제 타입 변환 반드시 필요







* protected 접근 지정

접근 지정자
- private 멤버
	: 선언된 클래스 내에서만 접근 가능
	: 파생 클래스에서도 기본 클래스의 private 멤버 직접 접근 불가

- public 멤버
	: 선언된 클래스나 외부 어떤 클래스, 모든 외부 함수에 접근 허용
	: 파생 클래스에서 기본 클래스의 public 멤버 접근 가능

- protected 멤버
	: 선언된 클래스에서 접근 가능
	: 파생 클래스에서 기본 클래스의 public 멤버 접근 가능
	// 파생 클래스가 아닌 다른 클래스나 외부 함수에서는 protected 멤버를 접근할 수 없다.






* 상속 관계의 생성자와 소멸자 실행

질문1.
파생 클래스의 객체가 생성될 때 파생 클래스의 생성자와 기본 클래스의 
생성자가 모두 실행되는가 ? 아니면 파생 클래스의 생성자만 실행되는가 ?
- 둘다 실행된다.

질문2.
파생 클래스의 생성자와 기본 클래스의 생성자 중 어떤 생성자가 먼저 실행되는가 ?
- 기본 클래스의 생성자가 먼저 실행된 후 파생 클래스의 생성자가 실행된다.






* 소멸자의 실행 순서

파생 클래스의 객체가 소멸될 때
- 파생 클래스의 소멸자가 먼저 실행되고
- 기본 클래스의 소멸자가 나중에 실행





* 상속 지정
- 상속 선언 시 public, private, protected의 3가지 중 하나 지정
- 기본 클래스의 멤버의 접근 속성을 어떻게 계승할지 지정
	: public - 기본 클래스의 protected, public 멤버 속성을 그대로 계승
	: private - 기본 클래스의 protected, public 멤버를 private으로 계승
	: protected - 기본 클래스의 protected, public 멤버를 protected로 계승

예제8-4)
#include <iostream>
using namespace std;

class Base {
	int a;
	protected:
		void setA(int a) {this->a = a;}
	public:
		void showA(){ cout << a;}
};

class Derived : private Base {
	int b;
	protected :
		void setB(int b) { this->b = b;}
	public:
		void showB() { cout << b; }
};

int main(){
	Derived x;
	x.a = 5;		// 에러 발생 -> private
	x.setA(10);		// 에러 발생 -> private
	x.showB();		// 에러 발생 -> protected
}







* C++에서는 다중 상속 가능

다중 상속의 문제점
- 기본 클래스 멤버의 중복 상속







* 가상 상속
- 다중 상속으로 인한 기본 클래스 멤버의 중복 상속 해결
- 가상 상속
	-> 파생 클래스의 선언문에서 기본 클래스 앞에 virtual로 선언
	-> 파생 클래스의 객체가 생성될 때 기본 클래스의 멤버는 오직 한 번만 생성
	: 기본 클래스의 멤버가 중복하여 생성되는 것을 방지













