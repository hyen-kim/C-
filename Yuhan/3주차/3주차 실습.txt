
===================================================================================

3주차 : 화면 출력 => 객체 지향에 대해 배우는 것이 주 목표
객체지향 언어가 처음으로 나오게 제일 많이 사용한 것이 C++이기 때문에 주로 사용
>> 0203 과제 제출

===================================================================================

1. cout 과 << 연산자 이용 >
std::cout << "Hello\n" // 화면에 Hello를 출력하고 다음 줄로 넘어감
std::cout << "첫 번째 맛보기 입니다.\n";

2. cout 객체 
- 스크린 출력 장치에 연결된 표준 C++ 출력 스트림 객체
- <iostream> 헤더 파일에 선언
- std 이름 공간에 선언 : std::cout으로 사용

3. << 연산자 
 1) 스트림 삽입 연산자 (stream insertion operator) 
  - C++ 기본 산술 시프트 연산자(<<)가 스트림 삽입 연산자로 재정의됨
  - ostream 클래스에 구현됨
  - 오른쪽  피연산자를 왼쪽 스트림 객체에 삽입
  - cout 객체에 연결된 화면에 출력

  2) 여러 개의 << 연산자로 여러 값 출력


  3) 연산식 뿐 아니라 함수 호출도 가능
  std::cout << f(); // f라는 함수가 호출되는 과정이 보이는 것이 아니라 
		    // 어떠한 리턴값을 갖되었을 때 어떤 값을 가졌는지 출력됨
	            
  4) 다음 줄로 넘어가기 ( \n, std::endl(표준라이브러리에서 엔터키 기능 제공))


* printf()를 잊어라.
-> cout과 <<를 사용하여야한다.



-------------------------------------------------------------------------------------

namespace 개념	=> 함수가 아님
1. 이름 충돌이 발생하는 경우
- 여러 명이 서로 나누어 프로젝트를 개발하는 경우
- 오픈 소스 혹은 다른사람이 작성한 소스나 목적 파일을 가져와서 컴파일하거나 링크하는 경우
=> 해결하는데 많은 시간과 노력이 필요


std:: 란 ? ( 표준에서 정의 )
- C++ 표준에서 정의한 '이름 공간' 중 하나
< iostream> 헤더 파일에 선언된 모든 이름 :std 이름 공간 안에 있음
cout, ein, endl 등

- std 이름 공간에 선언된 이름을 접근하기 위해 std :: 접두어 사용
std::cout, std::ein, std::endl

- std 생략
using 지시어 사용
using std::cout; // cout에 대해서만 std:: 생략
cout << "Hello"<< std::endl; // std::cout에서 std::생략

using namespace std; // std 이름 공간에 선언된 모든 이름에 std:: 생략
cout << "Hello" < endl; // std:: 생략


<iostream>이 통째로 std 이름 공간 내에 선언
- <iostream> 헤더 파일을 사용하려면 다음 코드 필요
#include <iostream> 
using namespace std;


-------------------------------------------------------------------------------------

cin => <Enter>을 치지 않으면 값이 전달되지 않음
- 표준 입력 장치인 키보드를 연결하는 C++ 입력 스트림 객체

>> 연산자
- 스트림 추출 연산자 
	-> C++ 산술 시프트 연산자가 <iostream> 헤더 파일에 스트림 추출 연산자로 재정의됨
	-> 입력 스트림에서 값을 읽어 변수에 저장
- 연속된 >> 연산자를 사용하여 여러 값 입력 가능

*) 입력을 받을 때 변수 값으로 들어가는가 ?
아니요 키보드를 치는 순간에 지속적으로 스트리밍되서 버퍼에 남아있다가 
엔터키를 치는 순간 딜리밍터 문자로 받아서 처리를 하게 된다.

=> 엔터를 칠때까지 계속 숫자를 입력가능 -> 버퍼링이 되고 있다는 말
=> 여러 값을 넣고 싶을 때 스페이스로 구분하여 값을 저장
스페이스를 주고 하게 되면 첫번째 값 두번째 값 차곡 차곡 들어가게 된다.
그 변수 값 이상을 입력하게 되었을 시 변수의 갯수에 맞춰서 값이 들어가고 나머지는 버려지게된다.

특징 
- 입력 버퍼를 내장하고 있음
- <Enter> 키가 입력될 때까지 입력된 키를 입력 버퍼에 저장
  -> 도중에 <Backspace> 키를 입력하면 입력된 키 삭제

>> 연산자
- <Enter> 키가 입력되면 비로소 cin의 입력 버퍼에서 키 값을 읽어 변수에 전달

-------------------------------------------------------------------------------------

C++ 의 변수 선언 ( 자료형 변수명 ;)
=> 변수는 제일 상단에 선언하는 것이 좋음
=> 남들이 봤을 때 이해하기 쉬운 변수명을 사용하는 것이 좋음

- 변수 선언은 아무 곳이나 가능
- C++ 변수 선언 방식의 장점 : 변수를 사용하기 직전 선언함으로써 변수 이름에 대한 타이핑 오류 줄임
- C++ 변수 선언 방식의 단점 : 선언된 변수를 일괄적으로 보기 힘듬, 코드 사이에 있는 변수 찾기 어려움

-------------------------------------------------------------------------------------
C++의 문자열 표현 방식 : 2가지
char name1[6] = {'G','r','a','c','e','\0'}; // name1은 문자열  => C-스트링 문자열
char name2[5] = {'G','r','a','c','e'}; 	    // name2는 문자열이 아니고 단순 문자 배열
-> string형보다 처리 속도가 빠르다.

String 클래스 이용 
- <string> 헤더 파일에 선언됨
- 다양한 멤버 함수 제공, 문자열 비교, 복사, 수정 등
-> string aa는 선언이 가능하지만 String은 <string> 헤더파일을 선언하지 않으면 사용 불가능
-> 버전에 따라서 동작방식이 다르다.

[F9]키를 이용하여 중단점 설정

