=============================================================

14주차 : 이번학기의 마지막 영상

=============================================================

< auto를 이용하여 쉬운 변수 선언 >

* C++에서 auto
- 기능
	: C++ 11부터 auto 선언의 의미 수정 : 컴파일러에게 변수선언문에서
	  추론하여 타입을 "자동 선언"하도록 지시
- 장점
	: 복잡한 변수 선언을 간소하게, 긴 타입 선언 시 오타 줄임

* auto의 기본 사용 사례
auto pi = 3.14;	// 3.14가 실수이므로 pi는 double 타입으로 선언됨
auto n = 3;	// 3이 정수이므로 n을 int 타입으로
auto *p = &n;	// 변수 p는 int* 타입으로 추론

int n = 10;
int & ref = n;		// ref는 int에 대한 참조 변수
auto ref2 = ref;	// ref2는 int& 변수로 자동 선언




< 람다 >

* 람다 대수와 람다식
- 람다 대수에서 람다식은 수학 함수를 단순하게 표현하는 기법


* C++ 람다
- 익명의 함수 만드는 기능으로 C++11에서 도입
	: 람다식, 람다 함수로도 불림
	: C#, Java, 파이썬, 자바스크립트 등 많은 언어들이 도입하고 있음


< C++에서 람다식 선언 >

* C++의 람다식의 구성
- 4 부분으로 구성
	: 캡쳐 리스트 : 람다식에서 사용하고자 하는 함수 바깥의 변수 목록
	: 매개 변수 리스트 : 보통 함수의 매개변수 리스트와 동일
	: 리턴 타입
	: 함수 바디 -> 람다식의 함수 코드

캡쳐리스트	매개변수리스트	 생략가능   함수바디
[	] 	(	     )	 리턴타입   { /*  */ };
(a) 람다식의 기본 구조

[](int x, int y) { cout << x + y; };	// 매개변수 x, y의 합을 출력하는 람다 작성
[](int x, int y) int { return x + y; };	// 매개변수 x, y의 합을 리턴하는 람다 작성
[](int x, int y) { cout << x + y; }(2, 3);	// x에 2, y에 3을 대입하여 코드 실행. 5 출력



예제 10-15) 매개변수 x, y의 합을 출력하는 람다식 만들기
- 매개변수 x, y의 합을 출력하는 람다식은 다음과 같이 작성
[](int x, int y) { cout << x + y; }; 	// x, y의 합을 출력하는 람다식

- x에 2, y에 3을 전달하여 람다식이 바로 실행된다.
#include <iostream>
using namespace std;

int main() {
   // 람다 함수 선언과 동시에 호출 (x=2, y=3 전달)
   [](int x, int y) { cout << "합은 " << x + y; } (2, 3);  // 5 출력
}

예제 10-16) auto로 람다식 저장 및 호출
예제 10-17) 반지름이 r이 원의 면적으로 리턴하는 람다식 만들기
예제 10-18) 캡쳐 리스트에 참조 활용. 합을 외부에 저장하는 람다식 만들기


--> 11, 12, 13장 소개만 

11장 : C++ 입출력 시스템 
12장 : 파일 입출력
13장 : 예외처리


